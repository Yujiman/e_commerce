// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/aggregatorOrder/aggregatorOrder.proto

package aggregatorOrder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggregatorOrderServiceClient is the client API for AggregatorOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorOrderServiceClient interface {
	GeItemsByOrder(ctx context.Context, in *GeItemsByOrderIRequest, opts ...grpc.CallOption) (*Order, error)
}

type aggregatorOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorOrderServiceClient(cc grpc.ClientConnInterface) AggregatorOrderServiceClient {
	return &aggregatorOrderServiceClient{cc}
}

func (c *aggregatorOrderServiceClient) GeItemsByOrder(ctx context.Context, in *GeItemsByOrderIRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/aggregatorOrder.AggregatorOrderService/GeItemsByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorOrderServiceServer is the server API for AggregatorOrderService service.
// All implementations must embed UnimplementedAggregatorOrderServiceServer
// for forward compatibility
type AggregatorOrderServiceServer interface {
	GeItemsByOrder(context.Context, *GeItemsByOrderIRequest) (*Order, error)
	mustEmbedUnimplementedAggregatorOrderServiceServer()
}

// UnimplementedAggregatorOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAggregatorOrderServiceServer struct {
}

func (UnimplementedAggregatorOrderServiceServer) GeItemsByOrder(context.Context, *GeItemsByOrderIRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeItemsByOrder not implemented")
}
func (UnimplementedAggregatorOrderServiceServer) mustEmbedUnimplementedAggregatorOrderServiceServer() {
}

// UnsafeAggregatorOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorOrderServiceServer will
// result in compilation errors.
type UnsafeAggregatorOrderServiceServer interface {
	mustEmbedUnimplementedAggregatorOrderServiceServer()
}

func RegisterAggregatorOrderServiceServer(s grpc.ServiceRegistrar, srv AggregatorOrderServiceServer) {
	s.RegisterService(&AggregatorOrderService_ServiceDesc, srv)
}

func _AggregatorOrderService_GeItemsByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeItemsByOrderIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorOrderServiceServer).GeItemsByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorOrder.AggregatorOrderService/GeItemsByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorOrderServiceServer).GeItemsByOrder(ctx, req.(*GeItemsByOrderIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregatorOrderService_ServiceDesc is the grpc.ServiceDesc for AggregatorOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregatorOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregatorOrder.AggregatorOrderService",
	HandlerType: (*AggregatorOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeItemsByOrder",
			Handler:    _AggregatorOrderService_GeItemsByOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/aggregatorOrder/aggregatorOrder.proto",
}
