// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dispatcherRole

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DispatcherRoleServiceClient is the client API for DispatcherRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherRoleServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*UUID, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveByDomain(ctx context.Context, in *RemoveByDomainRequest, opts ...grpc.CallOption) (*Empty, error)
}

type dispatcherRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherRoleServiceClient(cc grpc.ClientConnInterface) DispatcherRoleServiceClient {
	return &dispatcherRoleServiceClient{cc}
}

func (c *dispatcherRoleServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/dispatcherRole.DispatcherRoleService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherRoleServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dispatcherRole.DispatcherRoleService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherRoleServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dispatcherRole.DispatcherRoleService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherRoleServiceClient) RemoveByDomain(ctx context.Context, in *RemoveByDomainRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dispatcherRole.DispatcherRoleService/RemoveByDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherRoleServiceServer is the server API for DispatcherRoleService service.
// All implementations must embed UnimplementedDispatcherRoleServiceServer
// for forward compatibility
type DispatcherRoleServiceServer interface {
	Add(context.Context, *AddRequest) (*UUID, error)
	Update(context.Context, *UpdateRequest) (*Empty, error)
	Remove(context.Context, *RemoveRequest) (*Empty, error)
	RemoveByDomain(context.Context, *RemoveByDomainRequest) (*Empty, error)
	mustEmbedUnimplementedDispatcherRoleServiceServer()
}

// UnimplementedDispatcherRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherRoleServiceServer struct {
}

func (UnimplementedDispatcherRoleServiceServer) Add(context.Context, *AddRequest) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDispatcherRoleServiceServer) Update(context.Context, *UpdateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDispatcherRoleServiceServer) Remove(context.Context, *RemoveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedDispatcherRoleServiceServer) RemoveByDomain(context.Context, *RemoveByDomainRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveByDomain not implemented")
}
func (UnimplementedDispatcherRoleServiceServer) mustEmbedUnimplementedDispatcherRoleServiceServer() {}

// UnsafeDispatcherRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherRoleServiceServer will
// result in compilation errors.
type UnsafeDispatcherRoleServiceServer interface {
	mustEmbedUnimplementedDispatcherRoleServiceServer()
}

func RegisterDispatcherRoleServiceServer(s grpc.ServiceRegistrar, srv DispatcherRoleServiceServer) {
	s.RegisterService(&DispatcherRoleService_ServiceDesc, srv)
}

func _DispatcherRoleService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherRoleServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcherRole.DispatcherRoleService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherRoleServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatcherRoleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherRoleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcherRole.DispatcherRoleService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherRoleServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatcherRoleService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherRoleServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcherRole.DispatcherRoleService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherRoleServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatcherRoleService_RemoveByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherRoleServiceServer).RemoveByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcherRole.DispatcherRoleService/RemoveByDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherRoleServiceServer).RemoveByDomain(ctx, req.(*RemoveByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherRoleService_ServiceDesc is the grpc.ServiceDesc for DispatcherRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dispatcherRole.DispatcherRoleService",
	HandlerType: (*DispatcherRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DispatcherRoleService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DispatcherRoleService_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DispatcherRoleService_Remove_Handler,
		},
		{
			MethodName: "RemoveByDomain",
			Handler:    _DispatcherRoleService_RemoveByDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dispatcherRole/dispatcherRole.proto",
}
