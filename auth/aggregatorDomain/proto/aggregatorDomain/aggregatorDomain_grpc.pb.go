// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package aggregatorDomain

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggregatorDomainServiceClient is the client API for AggregatorDomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorDomainServiceClient interface {
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Domain, error)
	GetByUrl(ctx context.Context, in *GetByUrlRequest, opts ...grpc.CallOption) (*Domain, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*Domains, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Domains, error)
}

type aggregatorDomainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorDomainServiceClient(cc grpc.ClientConnInterface) AggregatorDomainServiceClient {
	return &aggregatorDomainServiceClient{cc}
}

func (c *aggregatorDomainServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/aggregatorDomain.AggregatorDomainService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorDomainServiceClient) GetByUrl(ctx context.Context, in *GetByUrlRequest, opts ...grpc.CallOption) (*Domain, error) {
	out := new(Domain)
	err := c.cc.Invoke(ctx, "/aggregatorDomain.AggregatorDomainService/GetByUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorDomainServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*Domains, error) {
	out := new(Domains)
	err := c.cc.Invoke(ctx, "/aggregatorDomain.AggregatorDomainService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorDomainServiceClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Domains, error) {
	out := new(Domains)
	err := c.cc.Invoke(ctx, "/aggregatorDomain.AggregatorDomainService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorDomainServiceServer is the server API for AggregatorDomainService service.
// All implementations must embed UnimplementedAggregatorDomainServiceServer
// for forward compatibility
type AggregatorDomainServiceServer interface {
	GetById(context.Context, *GetByIdRequest) (*Domain, error)
	GetByUrl(context.Context, *GetByUrlRequest) (*Domain, error)
	GetAll(context.Context, *GetAllRequest) (*Domains, error)
	Find(context.Context, *FindRequest) (*Domains, error)
	mustEmbedUnimplementedAggregatorDomainServiceServer()
}

// UnimplementedAggregatorDomainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAggregatorDomainServiceServer struct {
}

func (UnimplementedAggregatorDomainServiceServer) GetById(context.Context, *GetByIdRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedAggregatorDomainServiceServer) GetByUrl(context.Context, *GetByUrlRequest) (*Domain, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUrl not implemented")
}
func (UnimplementedAggregatorDomainServiceServer) GetAll(context.Context, *GetAllRequest) (*Domains, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAggregatorDomainServiceServer) Find(context.Context, *FindRequest) (*Domains, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedAggregatorDomainServiceServer) mustEmbedUnimplementedAggregatorDomainServiceServer() {
}

// UnsafeAggregatorDomainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorDomainServiceServer will
// result in compilation errors.
type UnsafeAggregatorDomainServiceServer interface {
	mustEmbedUnimplementedAggregatorDomainServiceServer()
}

func RegisterAggregatorDomainServiceServer(s grpc.ServiceRegistrar, srv AggregatorDomainServiceServer) {
	s.RegisterService(&AggregatorDomainService_ServiceDesc, srv)
}

func _AggregatorDomainService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorDomainServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorDomain.AggregatorDomainService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorDomainServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorDomainService_GetByUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorDomainServiceServer).GetByUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorDomain.AggregatorDomainService/GetByUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorDomainServiceServer).GetByUrl(ctx, req.(*GetByUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorDomainService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorDomainServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorDomain.AggregatorDomainService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorDomainServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorDomainService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorDomainServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorDomain.AggregatorDomainService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorDomainServiceServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregatorDomainService_ServiceDesc is the grpc.ServiceDesc for AggregatorDomainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregatorDomainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregatorDomain.AggregatorDomainService",
	HandlerType: (*AggregatorDomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _AggregatorDomainService_GetById_Handler,
		},
		{
			MethodName: "GetByUrl",
			Handler:    _AggregatorDomainService_GetByUrl_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AggregatorDomainService_GetAll_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _AggregatorDomainService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/aggregatorDomain/aggregatorDomain.proto",
}
