// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dispatcherDomain

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DispatcherDomainServiceClient is the client API for DispatcherDomainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherDomainServiceClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*UUID, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*Empty, error)
}

type dispatcherDomainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherDomainServiceClient(cc grpc.ClientConnInterface) DispatcherDomainServiceClient {
	return &dispatcherDomainServiceClient{cc}
}

func (c *dispatcherDomainServiceClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/dispatcherDomain.DispatcherDomainService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherDomainServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dispatcherDomain.DispatcherDomainService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherDomainServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/dispatcherDomain.DispatcherDomainService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherDomainServiceServer is the server API for DispatcherDomainService service.
// All implementations must embed UnimplementedDispatcherDomainServiceServer
// for forward compatibility
type DispatcherDomainServiceServer interface {
	Add(context.Context, *AddRequest) (*UUID, error)
	Update(context.Context, *UpdateRequest) (*Empty, error)
	Remove(context.Context, *RemoveRequest) (*Empty, error)
	mustEmbedUnimplementedDispatcherDomainServiceServer()
}

// UnimplementedDispatcherDomainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherDomainServiceServer struct {
}

func (UnimplementedDispatcherDomainServiceServer) Add(context.Context, *AddRequest) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedDispatcherDomainServiceServer) Update(context.Context, *UpdateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDispatcherDomainServiceServer) Remove(context.Context, *RemoveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedDispatcherDomainServiceServer) mustEmbedUnimplementedDispatcherDomainServiceServer() {
}

// UnsafeDispatcherDomainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherDomainServiceServer will
// result in compilation errors.
type UnsafeDispatcherDomainServiceServer interface {
	mustEmbedUnimplementedDispatcherDomainServiceServer()
}

func RegisterDispatcherDomainServiceServer(s grpc.ServiceRegistrar, srv DispatcherDomainServiceServer) {
	s.RegisterService(&DispatcherDomainService_ServiceDesc, srv)
}

func _DispatcherDomainService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherDomainServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcherDomain.DispatcherDomainService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherDomainServiceServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatcherDomainService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherDomainServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcherDomain.DispatcherDomainService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherDomainServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatcherDomainService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherDomainServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcherDomain.DispatcherDomainService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherDomainServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherDomainService_ServiceDesc is the grpc.ServiceDesc for DispatcherDomainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherDomainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dispatcherDomain.DispatcherDomainService",
	HandlerType: (*DispatcherDomainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _DispatcherDomainService_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DispatcherDomainService_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DispatcherDomainService_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dispatcherDomain/dispatcherDomain.proto",
}
