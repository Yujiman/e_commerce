// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package authorize

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizeServiceClient is the client API for AuthorizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizeServiceClient interface {
	AuthByPasswordDomain(ctx context.Context, in *AuthByPasswordDomainRequest, opts ...grpc.CallOption) (*TokensWithUserData, error)
	AuthByRefresh(ctx context.Context, in *AuthByRefreshRequest, opts ...grpc.CallOption) (*Tokens, error)
}

type authorizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizeServiceClient(cc grpc.ClientConnInterface) AuthorizeServiceClient {
	return &authorizeServiceClient{cc}
}

func (c *authorizeServiceClient) AuthByPasswordDomain(ctx context.Context, in *AuthByPasswordDomainRequest, opts ...grpc.CallOption) (*TokensWithUserData, error) {
	out := new(TokensWithUserData)
	err := c.cc.Invoke(ctx, "/authorize.AuthorizeService/AuthByPasswordDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizeServiceClient) AuthByRefresh(ctx context.Context, in *AuthByRefreshRequest, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/authorize.AuthorizeService/AuthByRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizeServiceServer is the server API for AuthorizeService service.
// All implementations must embed UnimplementedAuthorizeServiceServer
// for forward compatibility
type AuthorizeServiceServer interface {
	AuthByPasswordDomain(context.Context, *AuthByPasswordDomainRequest) (*TokensWithUserData, error)
	AuthByRefresh(context.Context, *AuthByRefreshRequest) (*Tokens, error)
	mustEmbedUnimplementedAuthorizeServiceServer()
}

// UnimplementedAuthorizeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizeServiceServer struct {
}

func (UnimplementedAuthorizeServiceServer) AuthByPasswordDomain(context.Context, *AuthByPasswordDomainRequest) (*TokensWithUserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthByPasswordDomain not implemented")
}
func (UnimplementedAuthorizeServiceServer) AuthByRefresh(context.Context, *AuthByRefreshRequest) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthByRefresh not implemented")
}
func (UnimplementedAuthorizeServiceServer) mustEmbedUnimplementedAuthorizeServiceServer() {}

// UnsafeAuthorizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizeServiceServer will
// result in compilation errors.
type UnsafeAuthorizeServiceServer interface {
	mustEmbedUnimplementedAuthorizeServiceServer()
}

func RegisterAuthorizeServiceServer(s grpc.ServiceRegistrar, srv AuthorizeServiceServer) {
	s.RegisterService(&AuthorizeService_ServiceDesc, srv)
}

func _AuthorizeService_AuthByPasswordDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthByPasswordDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).AuthByPasswordDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorize.AuthorizeService/AuthByPasswordDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).AuthByPasswordDomain(ctx, req.(*AuthByPasswordDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizeService_AuthByRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthByRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizeServiceServer).AuthByRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorize.AuthorizeService/AuthByRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizeServiceServer).AuthByRefresh(ctx, req.(*AuthByRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizeService_ServiceDesc is the grpc.ServiceDesc for AuthorizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authorize.AuthorizeService",
	HandlerType: (*AuthorizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthByPasswordDomain",
			Handler:    _AuthorizeService_AuthByPasswordDomain_Handler,
		},
		{
			MethodName: "AuthByRefresh",
			Handler:    _AuthorizeService_AuthByRefresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/authorize/authorize.proto",
}
