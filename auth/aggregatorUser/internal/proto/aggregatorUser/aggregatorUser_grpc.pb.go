// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/aggregatorUser/aggregatorUser.proto

package aggregatorUser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggregatorUserServiceClient is the client API for AggregatorUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorUserServiceClient interface {
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*User, error)
	GetByUsername(ctx context.Context, in *GetByUsernameRequest, opts ...grpc.CallOption) (*User, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*Users, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Users, error)
}

type aggregatorUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorUserServiceClient(cc grpc.ClientConnInterface) AggregatorUserServiceClient {
	return &aggregatorUserServiceClient{cc}
}

func (c *aggregatorUserServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/aggregatorUser.AggregatorUserService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorUserServiceClient) GetByUsername(ctx context.Context, in *GetByUsernameRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/aggregatorUser.AggregatorUserService/GetByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorUserServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/aggregatorUser.AggregatorUserService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorUserServiceClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/aggregatorUser.AggregatorUserService/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorUserServiceServer is the server API for AggregatorUserService service.
// All implementations must embed UnimplementedAggregatorUserServiceServer
// for forward compatibility
type AggregatorUserServiceServer interface {
	GetById(context.Context, *GetByIdRequest) (*User, error)
	GetByUsername(context.Context, *GetByUsernameRequest) (*User, error)
	GetAll(context.Context, *GetAllRequest) (*Users, error)
	Find(context.Context, *FindRequest) (*Users, error)
	mustEmbedUnimplementedAggregatorUserServiceServer()
}

// UnimplementedAggregatorUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAggregatorUserServiceServer struct {
}

func (UnimplementedAggregatorUserServiceServer) GetById(context.Context, *GetByIdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedAggregatorUserServiceServer) GetByUsername(context.Context, *GetByUsernameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUsername not implemented")
}
func (UnimplementedAggregatorUserServiceServer) GetAll(context.Context, *GetAllRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedAggregatorUserServiceServer) Find(context.Context, *FindRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedAggregatorUserServiceServer) mustEmbedUnimplementedAggregatorUserServiceServer() {}

// UnsafeAggregatorUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorUserServiceServer will
// result in compilation errors.
type UnsafeAggregatorUserServiceServer interface {
	mustEmbedUnimplementedAggregatorUserServiceServer()
}

func RegisterAggregatorUserServiceServer(s grpc.ServiceRegistrar, srv AggregatorUserServiceServer) {
	s.RegisterService(&AggregatorUserService_ServiceDesc, srv)
}

func _AggregatorUserService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorUserServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorUser.AggregatorUserService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorUserServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorUserService_GetByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorUserServiceServer).GetByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorUser.AggregatorUserService/GetByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorUserServiceServer).GetByUsername(ctx, req.(*GetByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorUserService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorUserServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorUser.AggregatorUserService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorUserServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorUserService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorUserServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorUser.AggregatorUserService/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorUserServiceServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregatorUserService_ServiceDesc is the grpc.ServiceDesc for AggregatorUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregatorUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregatorUser.AggregatorUserService",
	HandlerType: (*AggregatorUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _AggregatorUserService_GetById_Handler,
		},
		{
			MethodName: "GetByUsername",
			Handler:    _AggregatorUserService_GetByUsername_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _AggregatorUserService_GetAll_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _AggregatorUserService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/aggregatorUser/aggregatorUser.proto",
}
