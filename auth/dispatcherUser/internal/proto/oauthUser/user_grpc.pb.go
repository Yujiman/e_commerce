// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oauthUser

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OAuthUserClient is the client API for OAuthUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthUserClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*UUID, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Empty, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*Empty, error)
	AttachDomains(ctx context.Context, in *AttachDomainsRequest, opts ...grpc.CallOption) (*Empty, error)
	DetachDomains(ctx context.Context, in *DetachDomainsRequest, opts ...grpc.CallOption) (*Empty, error)
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*User, error)
	GetByUsername(ctx context.Context, in *GetByUsernameRequest, opts ...grpc.CallOption) (*User, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*Users, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Users, error)
}

type oAuthUserClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthUserClient(cc grpc.ClientConnInterface) OAuthUserClient {
	return &oAuthUserClient{cc}
}

func (c *oAuthUserClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserClient) AttachDomains(ctx context.Context, in *AttachDomainsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/AttachDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserClient) DetachDomains(ctx context.Context, in *DetachDomainsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/DetachDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserClient) GetByUsername(ctx context.Context, in *GetByUsernameRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/GetByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthUserClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/oauthUser.OAuthUser/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthUserServer is the server API for OAuthUser service.
// All implementations must embed UnimplementedOAuthUserServer
// for forward compatibility
type OAuthUserServer interface {
	Add(context.Context, *AddRequest) (*UUID, error)
	Update(context.Context, *UpdateRequest) (*Empty, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*Empty, error)
	Remove(context.Context, *RemoveRequest) (*Empty, error)
	AttachDomains(context.Context, *AttachDomainsRequest) (*Empty, error)
	DetachDomains(context.Context, *DetachDomainsRequest) (*Empty, error)
	GetById(context.Context, *GetByIdRequest) (*User, error)
	GetByUsername(context.Context, *GetByUsernameRequest) (*User, error)
	GetAll(context.Context, *GetAllRequest) (*Users, error)
	Find(context.Context, *FindRequest) (*Users, error)
	mustEmbedUnimplementedOAuthUserServer()
}

// UnimplementedOAuthUserServer must be embedded to have forward compatible implementations.
type UnimplementedOAuthUserServer struct {
}

func (UnimplementedOAuthUserServer) Add(context.Context, *AddRequest) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedOAuthUserServer) Update(context.Context, *UpdateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOAuthUserServer) UpdateRole(context.Context, *UpdateRoleRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedOAuthUserServer) Remove(context.Context, *RemoveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedOAuthUserServer) AttachDomains(context.Context, *AttachDomainsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachDomains not implemented")
}
func (UnimplementedOAuthUserServer) DetachDomains(context.Context, *DetachDomainsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachDomains not implemented")
}
func (UnimplementedOAuthUserServer) GetById(context.Context, *GetByIdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedOAuthUserServer) GetByUsername(context.Context, *GetByUsernameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUsername not implemented")
}
func (UnimplementedOAuthUserServer) GetAll(context.Context, *GetAllRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedOAuthUserServer) Find(context.Context, *FindRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedOAuthUserServer) mustEmbedUnimplementedOAuthUserServer() {}

// UnsafeOAuthUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthUserServer will
// result in compilation errors.
type UnsafeOAuthUserServer interface {
	mustEmbedUnimplementedOAuthUserServer()
}

func RegisterOAuthUserServer(s grpc.ServiceRegistrar, srv OAuthUserServer) {
	s.RegisterService(&OAuthUser_ServiceDesc, srv)
}

func _OAuthUser_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUser_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUser_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUser_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUser_AttachDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).AttachDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/AttachDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).AttachDomains(ctx, req.(*AttachDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUser_DetachDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).DetachDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/DetachDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).DetachDomains(ctx, req.(*DetachDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUser_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUser_GetByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).GetByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/GetByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).GetByUsername(ctx, req.(*GetByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUser_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthUser_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthUserServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauthUser.OAuthUser/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthUserServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuthUser_ServiceDesc is the grpc.ServiceDesc for OAuthUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuthUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oauthUser.OAuthUser",
	HandlerType: (*OAuthUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _OAuthUser_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OAuthUser_Update_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _OAuthUser_UpdateRole_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _OAuthUser_Remove_Handler,
		},
		{
			MethodName: "AttachDomains",
			Handler:    _OAuthUser_AttachDomains_Handler,
		},
		{
			MethodName: "DetachDomains",
			Handler:    _OAuthUser_DetachDomains_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _OAuthUser_GetById_Handler,
		},
		{
			MethodName: "GetByUsername",
			Handler:    _OAuthUser_GetByUsername_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _OAuthUser_GetAll_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _OAuthUser_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/oauthUser/user.proto",
}
