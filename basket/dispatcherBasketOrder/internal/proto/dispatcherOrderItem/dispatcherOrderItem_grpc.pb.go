// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/dispatcherOrderItem/dispatcherOrderItem.proto

package dispatcherOrderItem

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DispatcherOrderItemServiceClient is the client API for DispatcherOrderItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherOrderItemServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*UUID, error)
	PutItems(ctx context.Context, in *PutItemsRequest, opts ...grpc.CallOption) (*UUIDs, error)
}

type dispatcherOrderItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherOrderItemServiceClient(cc grpc.ClientConnInterface) DispatcherOrderItemServiceClient {
	return &dispatcherOrderItemServiceClient{cc}
}

func (c *dispatcherOrderItemServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/dispatcherOrderItem.DispatcherOrderItemService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherOrderItemServiceClient) PutItems(ctx context.Context, in *PutItemsRequest, opts ...grpc.CallOption) (*UUIDs, error) {
	out := new(UUIDs)
	err := c.cc.Invoke(ctx, "/dispatcherOrderItem.DispatcherOrderItemService/PutItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherOrderItemServiceServer is the server API for DispatcherOrderItemService service.
// All implementations must embed UnimplementedDispatcherOrderItemServiceServer
// for forward compatibility
type DispatcherOrderItemServiceServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*UUID, error)
	PutItems(context.Context, *PutItemsRequest) (*UUIDs, error)
	mustEmbedUnimplementedDispatcherOrderItemServiceServer()
}

// UnimplementedDispatcherOrderItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherOrderItemServiceServer struct {
}

func (UnimplementedDispatcherOrderItemServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedDispatcherOrderItemServiceServer) PutItems(context.Context, *PutItemsRequest) (*UUIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutItems not implemented")
}
func (UnimplementedDispatcherOrderItemServiceServer) mustEmbedUnimplementedDispatcherOrderItemServiceServer() {
}

// UnsafeDispatcherOrderItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherOrderItemServiceServer will
// result in compilation errors.
type UnsafeDispatcherOrderItemServiceServer interface {
	mustEmbedUnimplementedDispatcherOrderItemServiceServer()
}

func RegisterDispatcherOrderItemServiceServer(s grpc.ServiceRegistrar, srv DispatcherOrderItemServiceServer) {
	s.RegisterService(&DispatcherOrderItemService_ServiceDesc, srv)
}

func _DispatcherOrderItemService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherOrderItemServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcherOrderItem.DispatcherOrderItemService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherOrderItemServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DispatcherOrderItemService_PutItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherOrderItemServiceServer).PutItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcherOrderItem.DispatcherOrderItemService/PutItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherOrderItemServiceServer).PutItems(ctx, req.(*PutItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DispatcherOrderItemService_ServiceDesc is the grpc.ServiceDesc for DispatcherOrderItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DispatcherOrderItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dispatcherOrderItem.DispatcherOrderItemService",
	HandlerType: (*DispatcherOrderItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _DispatcherOrderItemService_CreateOrder_Handler,
		},
		{
			MethodName: "PutItems",
			Handler:    _DispatcherOrderItemService_PutItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/dispatcherOrderItem/dispatcherOrderItem.proto",
}
