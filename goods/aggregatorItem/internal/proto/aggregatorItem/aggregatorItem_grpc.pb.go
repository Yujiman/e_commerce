// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/aggregatorItem/aggregatorItem.proto

package aggregatorItem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AggregatorItemServiceClient is the client API for AggregatorItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregatorItemServiceClient interface {
	GetItemsByGroupItem(ctx context.Context, in *GetItemsByGroupItemRequest, opts ...grpc.CallOption) (*Items, error)
	GetItemsByCategoryItem(ctx context.Context, in *GetItemsByCategoryItemRequest, opts ...grpc.CallOption) (*Items, error)
}

type aggregatorItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregatorItemServiceClient(cc grpc.ClientConnInterface) AggregatorItemServiceClient {
	return &aggregatorItemServiceClient{cc}
}

func (c *aggregatorItemServiceClient) GetItemsByGroupItem(ctx context.Context, in *GetItemsByGroupItemRequest, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := c.cc.Invoke(ctx, "/aggregatorItem.AggregatorItemService/GetItemsByGroupItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorItemServiceClient) GetItemsByCategoryItem(ctx context.Context, in *GetItemsByCategoryItemRequest, opts ...grpc.CallOption) (*Items, error) {
	out := new(Items)
	err := c.cc.Invoke(ctx, "/aggregatorItem.AggregatorItemService/GetItemsByCategoryItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorItemServiceServer is the server API for AggregatorItemService service.
// All implementations must embed UnimplementedAggregatorItemServiceServer
// for forward compatibility
type AggregatorItemServiceServer interface {
	GetItemsByGroupItem(context.Context, *GetItemsByGroupItemRequest) (*Items, error)
	GetItemsByCategoryItem(context.Context, *GetItemsByCategoryItemRequest) (*Items, error)
	mustEmbedUnimplementedAggregatorItemServiceServer()
}

// UnimplementedAggregatorItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAggregatorItemServiceServer struct {
}

func (UnimplementedAggregatorItemServiceServer) GetItemsByGroupItem(context.Context, *GetItemsByGroupItemRequest) (*Items, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByGroupItem not implemented")
}
func (UnimplementedAggregatorItemServiceServer) GetItemsByCategoryItem(context.Context, *GetItemsByCategoryItemRequest) (*Items, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByCategoryItem not implemented")
}
func (UnimplementedAggregatorItemServiceServer) mustEmbedUnimplementedAggregatorItemServiceServer() {}

// UnsafeAggregatorItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregatorItemServiceServer will
// result in compilation errors.
type UnsafeAggregatorItemServiceServer interface {
	mustEmbedUnimplementedAggregatorItemServiceServer()
}

func RegisterAggregatorItemServiceServer(s grpc.ServiceRegistrar, srv AggregatorItemServiceServer) {
	s.RegisterService(&AggregatorItemService_ServiceDesc, srv)
}

func _AggregatorItemService_GetItemsByGroupItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByGroupItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorItemServiceServer).GetItemsByGroupItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorItem.AggregatorItemService/GetItemsByGroupItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorItemServiceServer).GetItemsByGroupItem(ctx, req.(*GetItemsByGroupItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AggregatorItemService_GetItemsByCategoryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByCategoryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorItemServiceServer).GetItemsByCategoryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aggregatorItem.AggregatorItemService/GetItemsByCategoryItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorItemServiceServer).GetItemsByCategoryItem(ctx, req.(*GetItemsByCategoryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregatorItemService_ServiceDesc is the grpc.ServiceDesc for AggregatorItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregatorItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aggregatorItem.AggregatorItemService",
	HandlerType: (*AggregatorItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItemsByGroupItem",
			Handler:    _AggregatorItemService_GetItemsByGroupItem_Handler,
		},
		{
			MethodName: "GetItemsByCategoryItem",
			Handler:    _AggregatorItemService_GetItemsByCategoryItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/aggregatorItem/aggregatorItem.proto",
}
