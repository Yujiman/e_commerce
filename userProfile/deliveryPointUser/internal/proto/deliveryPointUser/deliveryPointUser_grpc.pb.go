// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: internal/proto/deliveryPointUser/deliveryPointUser.proto

package deliveryPointUser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeliveryPointUserServiceClient is the client API for DeliveryPointUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliveryPointUserServiceClient interface {
	AttachUserToPoint(ctx context.Context, in *AttachUserToPointRequest, opts ...grpc.CallOption) (*Empty, error)
	DetachUserToPoint(ctx context.Context, in *DetachUserToPointRequest, opts ...grpc.CallOption) (*Empty, error)
	GetPointId(ctx context.Context, in *GetPointIdRequest, opts ...grpc.CallOption) (*DeliveryPointUser, error)
}

type deliveryPointUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliveryPointUserServiceClient(cc grpc.ClientConnInterface) DeliveryPointUserServiceClient {
	return &deliveryPointUserServiceClient{cc}
}

func (c *deliveryPointUserServiceClient) AttachUserToPoint(ctx context.Context, in *AttachUserToPointRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/deliveryPointUser.DeliveryPointUserService/AttachUserToPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryPointUserServiceClient) DetachUserToPoint(ctx context.Context, in *DetachUserToPointRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/deliveryPointUser.DeliveryPointUserService/DetachUserToPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryPointUserServiceClient) GetPointId(ctx context.Context, in *GetPointIdRequest, opts ...grpc.CallOption) (*DeliveryPointUser, error) {
	out := new(DeliveryPointUser)
	err := c.cc.Invoke(ctx, "/deliveryPointUser.DeliveryPointUserService/GetPointId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryPointUserServiceServer is the server API for DeliveryPointUserService service.
// All implementations must embed UnimplementedDeliveryPointUserServiceServer
// for forward compatibility
type DeliveryPointUserServiceServer interface {
	AttachUserToPoint(context.Context, *AttachUserToPointRequest) (*Empty, error)
	DetachUserToPoint(context.Context, *DetachUserToPointRequest) (*Empty, error)
	GetPointId(context.Context, *GetPointIdRequest) (*DeliveryPointUser, error)
	mustEmbedUnimplementedDeliveryPointUserServiceServer()
}

// UnimplementedDeliveryPointUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeliveryPointUserServiceServer struct {
}

func (UnimplementedDeliveryPointUserServiceServer) AttachUserToPoint(context.Context, *AttachUserToPointRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachUserToPoint not implemented")
}
func (UnimplementedDeliveryPointUserServiceServer) DetachUserToPoint(context.Context, *DetachUserToPointRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachUserToPoint not implemented")
}
func (UnimplementedDeliveryPointUserServiceServer) GetPointId(context.Context, *GetPointIdRequest) (*DeliveryPointUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointId not implemented")
}
func (UnimplementedDeliveryPointUserServiceServer) mustEmbedUnimplementedDeliveryPointUserServiceServer() {
}

// UnsafeDeliveryPointUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliveryPointUserServiceServer will
// result in compilation errors.
type UnsafeDeliveryPointUserServiceServer interface {
	mustEmbedUnimplementedDeliveryPointUserServiceServer()
}

func RegisterDeliveryPointUserServiceServer(s grpc.ServiceRegistrar, srv DeliveryPointUserServiceServer) {
	s.RegisterService(&DeliveryPointUserService_ServiceDesc, srv)
}

func _DeliveryPointUserService_AttachUserToPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachUserToPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryPointUserServiceServer).AttachUserToPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryPointUser.DeliveryPointUserService/AttachUserToPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryPointUserServiceServer).AttachUserToPoint(ctx, req.(*AttachUserToPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryPointUserService_DetachUserToPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachUserToPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryPointUserServiceServer).DetachUserToPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryPointUser.DeliveryPointUserService/DetachUserToPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryPointUserServiceServer).DetachUserToPoint(ctx, req.(*DetachUserToPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryPointUserService_GetPointId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryPointUserServiceServer).GetPointId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryPointUser.DeliveryPointUserService/GetPointId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryPointUserServiceServer).GetPointId(ctx, req.(*GetPointIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeliveryPointUserService_ServiceDesc is the grpc.ServiceDesc for DeliveryPointUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeliveryPointUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deliveryPointUser.DeliveryPointUserService",
	HandlerType: (*DeliveryPointUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AttachUserToPoint",
			Handler:    _DeliveryPointUserService_AttachUserToPoint_Handler,
		},
		{
			MethodName: "DetachUserToPoint",
			Handler:    _DeliveryPointUserService_DetachUserToPoint_Handler,
		},
		{
			MethodName: "GetPointId",
			Handler:    _DeliveryPointUserService_GetPointId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/deliveryPointUser/deliveryPointUser.proto",
}
